# Linear interpolation: https://en.wikipedia.org/wiki/Linear_interpolation
  jmp main

# ```
# fn lerp(x: f64, y: f64, t: f64) -> f64 { 
#     x + (y - x) * t
# }
# ```
# 
# Calling Convention: arguments pushed to stack from left to right (LTR)
# x
# y
# t
# <ret addr>
lerp:
  dup 3
  dup 3
  dup 1
  fminus        # y - x
  dup 3
  fmult         # (y - x) * t
  fplus         # x + (y- x) * t
  
  # clear arguments and put return value at the top of stack
  swap 2
  pop
  swap 2
  pop
  swap 2
  pop

  ret

main:
  push 69.0
  push 420.0
  push 0.0
  call lerp     # 69.0
  native 4      # print_f64

  push 69.0
  push 420.0
  push 1.0
  call lerp     # 420.0
  native 4      # print_f64

  push 69.0
  push 420.0
  push 0.5
  call lerp     # 244.5
  native 4      # print_f64

  halt